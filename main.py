from fastapi import FastAPI
from fastapi.responses import FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from openai import OpenAI
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# OpenRouter –∫–ª–∏–µ–Ω—Ç (–≤—Å—ë —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∫–ª—é—á)
client = OpenAI(
    api_key=os.getenv("OPENROUTER_API_KEY"),
    base_url="https://openrouter.ai/api/v1"
)

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/")
async def root():
    return FileResponse("static/index.html")

# –ü–∞–º—è—Ç—å –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
job_description = ""
chat_history = []

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class JobDescription(BaseModel):
    description: str

class Message(BaseModel):
    message: str

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@app.post("/set_job_description")
async def set_job_description(data: JobDescription):
    global job_description, chat_history
    job_description = data.description
    system_prompt = (
        f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π AI-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –ü—Ä–æ–≤–æ–¥–∏—à—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∏–∂–µ.\n\n"
        f"{job_description}\n\n"
        f"–ó–∞–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –Ω–µ –æ—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. "
        f"–ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    )
    chat_history = [{"role": "system", "content": system_prompt}]
    try:
        response = client.chat.completions.create(
            model="anthropic/claude-3-haiku",  # üí° Claude 3 Haiku
            messages=chat_history + [{"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–Ω—Ç–µ—Ä–≤—å—é."}],
            max_tokens=500
        )
        reply = response.choices[0].message.content
        chat_history.append({"role": "assistant", "content": reply})
        return {"message": reply}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
@app.post("/interview")
async def interview(data: Message):
    global chat_history
    chat_history.append({"role": "user", "content": data.message})
    try:
        response = client.chat.completions.create(
            model="anthropic/claude-3-haiku",
            messages=chat_history,
            max_tokens=500
        )
        reply = response.choices[0].message.content
        chat_history.append({"role": "assistant", "content": reply})
        return {"answer": reply}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})
